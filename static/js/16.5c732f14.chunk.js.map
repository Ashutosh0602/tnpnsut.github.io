{"version":3,"sources":["pages/ResetPassword.js"],"names":["ResetPassword","params","useLocation","useState","newPassword","setNewPassword","confirmedNewPassword","setConfirmedNewPassword","status","message","error","setError","history","useHistory","handleSubmit","e","a","preventDefault","axiosInstance","post","code","search","split","password","passwordConfirmation","push","err","response","data","messages","style","background","className","height","width","backgroundSize","maxWidth","color","onSubmit","xs","Group","Label","Control","type","required","value","onChange","target","variant"],"mappings":"mOAyFeA,UAnFO,WACpB,IAAMC,EAASC,cACf,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwDF,mBAAS,IAAjE,mBAAOG,EAAP,KAA6BC,EAA7B,KACA,EAA0BJ,mBAAS,CACjCK,QAAQ,EACRC,QAAS,KAFX,mBAAOC,EAAP,KAAcC,EAAd,KAIMC,EAAUC,cACVC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACnBD,EAAEE,iBADiB,kBAGXC,IAAcC,KAAK,uBAAwB,CAC/CC,KAAMnB,EAAOoB,OAAOC,MAAM,KAAK,GAC/BC,SAAUnB,EACVoB,qBAAsBlB,IANP,OAQjBM,EAAQa,KAAK,UARI,gDAUXC,EAAM,CACVlB,QAAQ,EACRC,QAAS,KAAMkB,SAASC,KAAKnB,QAAQ,GAAGoB,SAAS,GAAGpB,SAEtDE,EAASe,GAdQ,yDAAH,sDAkBlB,OACE,yBAAKI,MAAO,CAAEC,WAAY,YACxB,yBACEC,UAAU,wDACVF,MAAO,CAAEG,OAAQ,QAASC,MAAO,QAASC,eAAgB,UAE1D,yBAAKL,MAAO,CAAEI,MAAO,QAASE,SAAU,OAAQC,MAAO,WACrD,wBAAIP,MAAO,CAAEO,MAAO,eAApB,kBACA,kBAAC,IAAD,CAAMC,SAAUxB,EAAckB,UAAU,QACtC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKO,GAAI,IACP,kBAAC,IAAKC,MAAN,KACE,kBAAC,IAAKC,MAAN,qBACA,kBAAC,IAAKC,QAAN,CACEC,KAAK,WACLC,UAAQ,EACRC,MAAOzC,EACP0C,SAAU,SAAC/B,GAAD,OAAOV,EAAeU,EAAEgC,OAAOF,aAKjD,kBAAC,IAAD,CAAKb,UAAU,QACb,kBAAC,IAAD,CAAKO,GAAI,IACP,kBAAC,IAAKC,MAAN,KACE,kBAAC,IAAKC,MAAN,6BACA,kBAAC,IAAKC,QAAN,CACEC,KAAK,WACLC,UAAQ,EACRC,MAAOvC,EACPwC,SAAU,SAAC/B,GAAD,OAAOR,EAAwBQ,EAAEgC,OAAOF,aAK1D,kBAAC,IAAD,CAAKb,UAAU,QACb,kBAAC,IAAD,CAAKO,GAAI,IACP,kBAAC,IAAD,CACET,MAAO,CACLI,MAAO,OACPH,WAAY,+CAEdY,KAAK,UALP,uBAcTjC,EAAMF,QAAU,kBAAC,IAAD,CAAawC,QAAQ,SAASvC,QAASC,EAAMD","file":"static/js/16.5c732f14.chunk.js","sourcesContent":["import { Button, Col, Form, Row } from \"@themesberg/react-bootstrap\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport axiosInstance from \"../axiosConfig\";\r\nimport GlobalToast from \"../components/GlobalNotification/GlobalNotification\";\r\n\r\nconst ResetPassword = () => {\r\n  const params = useLocation();\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmedNewPassword, setConfirmedNewPassword] = useState(\"\");\r\n  const [error, setError] = useState({\r\n    status: false,\r\n    message: \"\",\r\n  });\r\n  const history = useHistory();\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axiosInstance.post(\"/auth/reset-password\", {\r\n        code: params.search.split(\"=\")[1], // code contained in the reset link of step 3.\r\n        password: newPassword,\r\n        passwordConfirmation: confirmedNewPassword,\r\n      });\r\n      history.push(\"/login\");\r\n    } catch (error) {\r\n      const err = {\r\n        status: true,\r\n        message: error.response.data.message[0].messages[0].message,\r\n      };\r\n      setError(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ background: \"#262b40\" }}>\r\n      <div\r\n        className=\"d-flex justify-content-center px-2 align-items-center\"\r\n        style={{ height: \"100vh\", width: \"100vw\", backgroundSize: \"cover\" }}\r\n      >\r\n        <div style={{ width: \"400px\", maxWidth: \"100%\", color: \"orange\" }}>\r\n          <h2 style={{ color: \"darkorange\" }}>Reset Password</h2>\r\n          <Form onSubmit={handleSubmit} className=\"mt-3\">\r\n            <Row>\r\n              <Col xs={12}>\r\n                <Form.Group>\r\n                  <Form.Label>New Password</Form.Label>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    required\r\n                    value={newPassword}\r\n                    onChange={(e) => setNewPassword(e.target.value)}\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n              <Col xs={12}>\r\n                <Form.Group>\r\n                  <Form.Label>Confirm New Password</Form.Label>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    required\r\n                    value={confirmedNewPassword}\r\n                    onChange={(e) => setConfirmedNewPassword(e.target.value)}\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-5\">\r\n              <Col xs={12}>\r\n                <Button\r\n                  style={{\r\n                    width: \"100%\",\r\n                    background: \"linear-gradient(to right, #fb7b4a, #ee3344)\",\r\n                  }}\r\n                  type=\"submit\"\r\n                >\r\n                  Reset Password\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n      {error.status && <GlobalToast variant=\"danger\" message={error.message} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}